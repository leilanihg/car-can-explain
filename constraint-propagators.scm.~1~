;;; ----------------------------------------------------------------------
;;; Copyright 2008 Alexey Radul and Gerald Jay Sussman.
;;; ----------------------------------------------------------------------
;;; This file is part of Artistic Propagator Prototype.
;;; 
;;; Artistic Propagator Prototype is free software; you can
;;; redistribute it and/or modify it under the terms of the GNU
;;; General Public License as published by the Free Software
;;; Foundation, either version 3 of the License, or (at your option)
;;; any later version.
;;; 
;;; Artistic Propagator Prototype is distributed in the hope that it
;;; will be useful, but WITHOUT ANY WARRANTY; without even the implied
;;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
;;; See the GNU General Public License for more details.
;;; 
;;; You should have received a copy of the GNU General Public License
;;; along with Artistic Propagator Prototype.  If not, see
;;; <http://www.gnu.org/licenses/>.
;;; ----------------------------------------------------------------------

;;; Constraint-propagator-constructors

(define (sum x y total)
  (constraint-propagator (list x y total)
    (lambda ()
      (adder x y total)
      (subtractor total x y)
      (subtractor total y x))
    `(sum ,(name x) ,(name y) ,(name total))))

(define (product x y total)
  (constraint-propagator (list x y total)
    (lambda ()
      (multiplier x y total)
      (divider total x y)
      (divider total y x))
    `(product ,(name x) ,(name y) ,(name total))))

(define (same x y)
  (constraint-propagator (list x y)
    (lambda ()
      (copier x y)
      (copier y x))
    `(same ,(name x) ,(name y))))

(define (controlled-same a b p)
  (constraint-propagator (list a b p)
    (lambda ()
      (spst-switch p a b)
      (spst-switch p b a))
    `(controlled-same ,(name a) ,(name b) ,(name p))))

(define (full-same a b p)
  (constraint-propagator (list a b p)
    (lambda ()
      (=? a b p)
      (spst-switch p a b)
      (spst-switch p b a))
    `(full-same ,(name a) ,(name b) ,(name p))))

;;; Logical constraints

(define (conjunction a b c)
  (constraint-propagator (list a b c)
    (lambda ()
      (conjoiner a b c)
      (p:dna c a b)
      (p:dna c b a)
      (p:imp c a)
      (p:imp c b))
    `(conjunction ,(name a) ,(name b) ,(name c))))

(define (disjunction a b c)
  (constraint-propagator (list a b c)
    (lambda ()
      (disjoiner a b c)
      (p:ro c a b)
      (p:ro c b a)
      (p:pmi c a)
      (p:pmi c b))
    `(disjunction ,(name a) ,(name b) ,(name c))))

(define (implication a b)
  (constraint-propagator (list a b)
    (lambda ()
      (p:imp a b)
      (p:pmi b a))))

(define (inversion a b)
  (constraint-propagator (list a b)
    (lambda ()
      (inverter a b)
      (inverter b a))
    `(inversion ,(name a) ,(name b))))

;;; These are (or should be) using AMB.

(define (quadratic x x^2)
  (constraint-propagator (list x x^2)
    (lambda ()
      (squarer x x^2)
      (sqrter x^2 x))
    `(quadratic ,(name x) ,(name x^2))))

(define (+->+ x ax)
  (constraint-propagator (list x ax)
    (lambda ()
      (absolute-value x ax)
      (let-cells (p one m-one mul)
        (conditional p one m-one mul)
        (binary-amb p)
        (product mul ax x)))
    `(+->+ ,(name x) ,(name ax))))
