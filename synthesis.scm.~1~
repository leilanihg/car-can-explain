;;; Synthesis of voltage-divider by slices.
;;;  Numerical values have underbars, e.g. V_S.
;;;  Internal names do not have underbars.

(initialize-scheduler)

(define-cell VI)
(define-cell R1)
(define-cell R2)

(define n1 (node 'n1))
(define n2 (node 'n2))
(define gnd (node 'gnd))

(define VSource ((voltage-source VI 'VS) n1 gnd))

(define RDiv1 ((linear-resistor R1 'R1) n1 n2))
(define RDiv2 ((linear-resistor R2 'R2) n2 gnd))

(define ODiv ((port 'OD) n2 gnd))

(cap! n1)
(cap! n2)
(cap! gnd)

(tell! VI 'V_S 'gjs1)
(tell! (potential gnd) 0 'gjs2)

;;; Declare R1 and R2 to be unknowns worth solving for.
(plunk! R1 'R_1)
(plunk! R2 'R_2)

;;; Let's put constraints on the output of the divider.
;;; In particular. let's make it a Thevenin equivalent:

(define n3 (node 'n3))
(define n4 (node 'n4))
(define n5 (node 'n5))

(define-cell VT)
(define-cell RT)

(define VThev ((voltage-source VT 'VT) n3 n5))
(define RThev ((linear-resistor RT 'RT) n3 n4))

(define OThev ((port 'OT) n4 n5))

(cap! n3)
(cap! n4)
(cap! n5)

;;; parallel combination of 30000 and 60000

(tell! RT 20000 'gjs3)			
(tell! VT (/ 'V_S 3) 'gjs4)

;;; End of Thevenin slice -- apply it.
(identify-ports ODiv OThev)

(tell! (current (thing '(t1 OT))) 'I 'gjs5)

;;; Not enuf to determine these?  Hmmm...

(cpp (inquire R1))
(cpp (inquire R2))


