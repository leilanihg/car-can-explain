
(define ((2-port-device type given-name vic . params) n1 n2 n3 n4)
  (physob (list n1 n2 n3 n4)
    (lambda ()
      (let ((terminal-names
             (if (list? type) (cdr type) '(t1 t2 t3 t4))))
        (let ((t1 (n1 (car terminal-names)))
              (t2 (n2 (cadr terminal-names)))
              (t3 (n3 (caddr terminal-names)))
              (t4 (n4 (cadddr terminal-names))))
          (let ((i1 (current t1)) (e1 (potential t1))
                (i2 (current t2)) (e2 (potential t2))
                (i3 (current t3)) (e3 (potential t3))
                (i4 (current t4)) (e4 (potential t4)))
	    (let-cells (v12 v34 P1 P2 P (zero-i 0))
              (sum v12 e2 e1)
              (sum v34 e4 e3)
              (sum i1 i2 zero-i)
              (sum i3 i4 zero-i)
              (product i1 v12 P1)
              (product i3 v34 P2)
              (sum P1 P2 P)
              (vic v12 i1 v34 i3)
              (define (insides message)
                (case message
                  ((terminals) (list t1 t2 t3 t4))
                  ((nodes) (list n1 n2 n3 n4))
                  ((currents) (list i1 i2 i3 i4))
                  ((potentials) (list e1 e2 e3 e4))
                  ((voltages) (list v12 v34))
                  ((powers) (list P1 P2 P))
                  ((power) P)
                  ((parameters) params)
                  ((type) type)
                  (else #f)))
              insides)))))
    (if (default-object? given-name)
        (let ((type (if (list? type) (car type) type)))
          `(,type ,(map name params)
                  ,(name n1) ,(name n2) ,(name n3) ,(name n4)))
        given-name)))

(define (linear-VCVS mu #!optional given-name)
  (2-port-device '(VCVS s+ s- o+ o-)
     (lambda (Vin Iin Vout Iout)
       ((constant 0) Iin)
       (product mu Vin Vout))))

(define (linear-VCCS g #!optional given-name)
  (2-port-device '(VCCS s+ s- o+ o-)
     (lambda (Vin Iin Vout Iout)
       ((constant 0) Iin)
       (product g Vin Iout))))

(define (linear-CCVS r #!optional given-name)
  (2-port-device '(CCVS s+ s- o+ o-)
     (lambda (Vin Iin Vout Iout)
       ((constant 0) Vin)
       (product r Iin Vout))))

(define (linear-CCCS b #!optional given-name)
  (2-port-device '(VCVS s+ s- o+ o-)
     (lambda (Vin Iin Vout Iout)
       ((constant 0) Vin)
       (product b Iin Iout))))
