;;; Here, transistor is set to be saturated

(initialize-scheduler)

(define TOP (node 'TOP))

(define GND (node 'GND))

(define B (node 'B))

(define C (node 'C))

(define E (node 'E))

(define-cell VThreshold)
(define-cell VSaturation)
(define Q
  ((bjt-crude-bias VThreshold VSaturation 'Q 'saturated)
   B C E))

(define-cell RB1)
(define RBU ((linear-resistor RB1 'RB1) TOP B))

(define-cell RB2)
(define RBD ((linear-resistor RB2 'RB2) B GND))

(define-cell RC)
(define RPU ((linear-resistor RC 'RC) TOP C))

(define-cell RE)
(define RPD ((linear-resistor RE 'RE) E GND))

(define-cell VCC)
(define VS  ((voltage-source VCC 'VCC) TOP GND))

(cap! TOP)
(cap! GND)
(cap! B)
(cap! C)
(cap! E)

;;; E96 1% values

(tell! VCC 15 'gjs1)
(tell! (potential GND) 0 'gjs2)

(tell! RB2 20000  'gjs3)
(tell! RB1 162000 'gjs4)
(tell! RC 15000 'gjs8)
(tell! RE  1000   'gjs6)

(tell! VThreshold 0.65 'gjs7)
(tell! VSaturation 0.2 'gjs7)

(cpp (inquire (thing '(current c Q))))
#;
((current c Q) (has-value (*the-nothing*)) (because ()) (depends-on))

(cpp (inquire (thing '(potential B))))
#;
((potential B) (has-value (*the-nothing*)) (because ()) (depends-on))

(plunk! (thing '(potential B)))

(cpp (inquire (thing '(potential B))))
#;
((potential B) (has-value plunk-22)
               (because ())
               (depends-on (premise-plunk-22)))

(cpp (inquire (thing '(current c Q))))
#;
((current c Q) (has-value (*the-nothing*)) (because ()) (depends-on))

(cpp (plunk! (thing '(current c Q))))
#;
(contradiction #[compound-procedure 114 me]
	       (gjs6 premise-plunk-23 gjs4 gjs3 premise-plunk-22 gjs7 gjs2 gjs1)
	       (#[compound-procedure 115 me]))

;;; Cell contradiction discovered in is:
(name (unhash 114))
;Value: (potential C)

;;; Perpetrator is:
(name (unhash 115))
((- ((potential TOP) (v RC)) (potential C))
 (sum (v RC) (potential C) (potential TOP))
 RC)

(cpp
 (g:simplify
  (v&s-value
   (strongest-consequence (content (thing '(potential C)))))))
#;
(+ .2925925925925919 (* -91/1620 plunk-22) (* 1000 plunk-23))

(cpp
 (g:simplify
  (v&s-value
   (strongest-consequence (content (thing '(potential TOP)))))))
#;
15

(cpp
 (g:simplify
  (v&s-value
   (strongest-consequence (content (thing '(v RC)))))))
#;
(+ 14.707407407407407 (* 91/1620 plunk-22) (* -1000 plunk-23))

(define foo
  (g:simplify
   (v&s-value
    (strongest-consequence (content (thing '(potential C)))))))

(define bar
 (g:simplify
  (v&s-value
   (strongest-consequence (content (thing '(v RC)))))))

(cpp (g:simplify (symb:+ foo bar)))
#;
15.

;;; This looks like a correct answer.  No contradiction should have
;;; appeared here.  Perhaps it is a numerical problem?

